diff --git a/config.def.h b/config.def.h
index 4cc8eb0..a0551eb 100644
--- a/config.def.h
+++ b/config.def.h
@@ -3,7 +3,7 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const char font[]            = "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-*";
+static const char font[]            = "-xos4-terminus-medium-r-normal--12-120-72-72-c-60-iso10646-1";
 static const char normbordercolor[] = "#202020";
 static const char normbgcolor[]     = "#202020";
 static const char normfgcolor[]     = "#999999";
@@ -17,7 +17,7 @@ static const Bool topbar            = True;     /* False means bottom bar */
 static const Bool viewontag         = True;     /* Switch view on tag switch */
 
 /* tagging */
-static const char *tags[] = { "trm", "web", "ed", "rdp", "a", "b", "c", "d", "e" };
+static const char *tags[] = { "trm", "web", "ed", "rdp", "\u03b1", "\u03b2", "\u03b3", "\u03be", "\u03c9" };
 
 static const Rule rules[] = {
 	/* class			instance    	title	tags mask	isfloating	monitor */
@@ -35,7 +35,7 @@ static const Bool resizehints = False; /* True means respect size hints in tiled
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
-	{ "#",      tile },    /* first entry is default */
+	{ "\u2560", tile },    /* first entry is default */
 	{ "~",      NULL },    /* no layout function means floating behavior */
 	{ "|",      monocle },
 };
diff --git a/dwm.c b/dwm.c
index 65208a0..c1fbb93 100644
--- a/dwm.c
+++ b/dwm.c
@@ -21,7 +21,6 @@
  * To understand everything else, start reading main().
  */
 #include <errno.h>
-#include <locale.h>
 #include <stdarg.h>
 #include <signal.h>
 #include <stdio.h>
@@ -178,6 +177,7 @@ static void die(const char *errstr, ...);
 static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
+static int drawstring2b(Display *display, Drawable d, GC gc, int x, int y, const char *string, int length);
 static void drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]);
 static void drawtext(const char *text, unsigned long col[ColLast], Bool invert);
 static void enternotify(XEvent *e);
@@ -227,6 +227,7 @@ static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static int textnw(const char *text, unsigned int len);
+static int textwidth2b(XFontStruct *font_struct, const char *string, int length);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
@@ -244,6 +245,7 @@ static void updatestatus(void);
 static void updatewindowtype(Client *c);
 static void updatetitle(Client *c);
 static void updatewmhints(Client *c);
+static int utf8toxchar2b(const char *intext, int inlen, XChar2b *outtext, int outlen);
 static void view(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
@@ -785,6 +787,59 @@ drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]) {
 		XDrawRectangle(dpy, dc.drawable, dc.gc, dc.x+1, dc.y+1, x, x);
 }
 
+int
+utf8toxchar2b(const char *intext, int inlen, XChar2b *outtext, int outlen)
+{
+	int j, k;
+	for(j =0, k=0; j < inlen && k < outlen; j ++) {
+		unsigned char c = intext[j];
+		if (c < 128) {
+			outtext[k].byte1 = 0;
+			outtext[k].byte2 = c;
+			k++;
+		}
+		else if (c < 0xC0) {
+			/* we're inside a character we don't know */
+			continue;
+		}
+		else
+			switch(c & 0xF0) {
+				case 0xC0:
+				case 0xD0: /* two bytes 5+6 = 11 bits */
+					if (inlen < j + 1)
+						return k;
+					outtext[k].byte1 = (c & 0x1C) >> 2;
+					j++;
+					outtext[k].byte2 = ((c & 0x3) << 6) + (intext[j] & 0x3F);
+					k++;
+					break;
+				case 0xE0: /* three bytes 4+6+6 = 16 bits */
+					if (inlen < j + 2)
+						return k;
+					j++;
+					outtext[k].byte1 = ((c & 0xF) << 4) + ((intext[j] & 0x3C) >> 2);
+					c = intext[j];
+					j++;
+					outtext[k].byte2 = ((c & 0x3) << 6) + (intext[j] & 0x3F);
+					k++;
+					break;
+				case 0xFF:
+					/* the character uses more than 16 bits */
+					break;
+			}
+	}
+	return k;
+}
+
+int
+drawstring2b(Display *display, Drawable d, GC gc, int x, int y, const char *string, int length)
+{
+	size_t len = strlen(string);
+	XChar2b charbuf[len * sizeof(*string)];
+	size_t buflen = utf8toxchar2b(string, length, charbuf, len);
+	return XDrawString16(display, d, gc, x, y, charbuf, buflen);
+}
+
 void
 drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
 	char buf[256];
@@ -809,7 +864,7 @@ drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
 	if(dc.font.set)
 		XmbDrawString(dpy, dc.drawable, dc.font.set, dc.gc, x, y, buf, len);
 	else
-		XDrawString(dpy, dc.drawable, dc.gc, x, y, buf, len);
+		drawstring2b(dpy, dc.drawable, dc.gc, x, y, buf, len);
 }
 
 void
@@ -974,14 +1029,7 @@ gettextprop(Window w, Atom atom, char *text, unsigned int size) {
 	XGetTextProperty(dpy, w, &name, atom);
 	if(!name.nitems)
 		return False;
-	if(name.encoding == XA_STRING)
-		strncpy(text, (char *)name.value, size - 1);
-	else {
-		if(XmbTextPropertyToTextList(dpy, &name, &list, &n) >= Success && n > 0 && *list) {
-			strncpy(text, *list, size - 1);
-			XFreeStringList(list);
-		}
-	}
+	strncpy(text, (char *)name.value, size - 1);
 	text[size - 1] = '\0';
 	XFree(name.value);
 	return True;
@@ -1165,6 +1213,10 @@ manage(Window w, XWindowAttributes *wa) {
 	arrange(c->mon);
 	XMapWindow(dpy, c->win);
 	focus(NULL);
+	if(viewontag && c->tags > 0) {
+		Arg a = {.ui = c->tags};
+		view(&a);
+	}
 }
 
 void
@@ -1693,6 +1745,15 @@ tagmon(const Arg *arg) {
 }
 
 int
+textwidth2b(XFontStruct *font_struct, const char *string, int length)
+{
+	size_t len = strlen(string);
+	XChar2b charbuf[len * sizeof(*string)];
+	size_t buflen = utf8toxchar2b(string, length, charbuf, len);
+	return XTextWidth16(font_struct, charbuf, buflen);
+}
+
+int
 textnw(const char *text, unsigned int len) {
 	XRectangle r;
 
@@ -1700,7 +1761,8 @@ textnw(const char *text, unsigned int len) {
 		XmbTextExtents(dc.font.set, text, len, NULL, &r);
 		return r.width;
 	}
-	return XTextWidth(dc.font.xfont, text, len);
+	return textwidth2b(dc.font.xfont, text, len);
+
 }
 
 void
@@ -2134,7 +2196,7 @@ main(int argc, char *argv[]) {
 		die("dwm-"VERSION", Â© 2006-2011 dwm engineers, see LICENSE for details\n");
 	else if(argc != 1)
 		die("usage: dwm [-v]\n");
-	if(!setlocale(LC_CTYPE, "") || !XSupportsLocale())
+	if(!XSupportsLocale())
 		fputs("warning: no locale support\n", stderr);
 	if(!(dpy = XOpenDisplay(NULL)))
 		die("dwm: cannot open display\n");
